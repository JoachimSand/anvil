fn Option(T: type) -> type {
	return enum {
		Some: T;
		None: void;
	};
}

DllNode := struct {
	val : i32;
	prev : Option(&DllNode);
	next : Option(&.own DllNode);
};

PrevOpt := Option(&DllNode);
NextOpt := Option(&.own DllNode);

fn main() -> void {
	// Create first node. Set prev and none to null initially.
	prev_none := PrevOpt::None{null};
	next_none := NextOpt::None{null};
	first_node := DllNode.{ val = 1; next = next_none; prev = prev_none; };
	
	// Allocate node
	mut hd := move @alloc(first_node);
	@print(hd.*.val);
	
	// Allocate an arbitrary length doubly-linked list	
	mut k : i32 = 0;
	while k < ... {
		k += 1;
		old_head := hd;

		new_next := NextOpt::Some{move hd};
		k_node := DllNode.{ val = k; next = new_next; prev = prev_none;};
		hd = move @alloc(move k_node);

		hd.*.prev = PrevOpt::Some{old_head};
	}

	// Free the doubly-linked list using a while-capture/while-match
	mut hd_opt := NextOpt::Some{move hd};
	while hd_opt |move node| {
		freed_node : DllNode = move @free(move node);
		hd_opt = move freed_node.next;
	}
	return;
}
