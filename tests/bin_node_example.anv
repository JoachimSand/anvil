Node := struct {
	c : u32;
	d : u32;
};

BinNode := struct {
	a : &.own Node;
	b : i32;
};

fn test(input : BinNode) -> i8 {
	// mut node_ref : &.own Node = move @alloc(Node.{c = 1; d = 2;});
	
	// bin1 : BinNode = BinNode.{ a = move node_ref; b = 3;};
	
	// mut bin_ref : &.own BinNode = move @alloc(bin1);

	mut bin2 : BinNode = move @free(move bin_ref);
	// t := @free(bin2.a);
	
	// t := @free(move bin1.a);
	// mut bin_ref := @alloc(bin1);
	// TODO: Add move inst after every @memalloc
	// mut bin_ref := move @alloc(BinNode.{a = move node_ref; b = 1;});
	
	// mut bin : BinNode = move @free(move bin_ref);
	// d := @free(move bin.a);
}


// mut node1 := Node.{c = 1; d = 2;};
// mut node_ref : &.own Node = move @alloc(node);
// bin1 : BinNode = BinNode.{ a = move node_ref; b = 3;};
// mut bin_ref : &.own BinNode = move @alloc(bin1);

// mut bin2 : BinNode = move @free(move bin_ref);
// node2 : Node = move @free(move bin2.a);
