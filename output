Reading from file ./tests/ll_0.anv

=========== FILE CONTENTS ===========
fn Option(T: type) -> type {
	return enum {
		Some: T;
		None: void;
	};
}

fn main(argc : i32) -> void {
	LLNode := struct {
		val : i32;
		next : Option(&.own LLNode);
	};
	NextOpt := Option(&.own LLNode);
	next_none := NextOpt::None{null};
			
	first_node := LLNode.{ val = 1; next = next_none;};

	// Allocate the node on the heap.
	mut hd : &.own LLNode = move @alloc(move first_node);

	// using 'move' will transfer ownership
	new_hd : &.own LLNode = move hd;

	// not using move just gives a normal reference
	hd_alias : &LLNode = new_hd;

	@free(move new_hd);
	// b := 23534 + 21312;
	// if b < 52312 {
	// 	@free(move new_hd);
	// } else {
	// 	@print(b);
	// }
	
	// mut k : i32 = 0;
	// while k < 0 {
	// 	k += 1;
	// 	new_next := NextOpt::Some{move hd};
	// 	new_node := LLNode.{val = 1; next = move new_next;};
	// 	hd = move @alloc(move new_node);
	// }
	return;
}

===========               ===========
└──Root
    ├──fn params Option 
    │  ├──Parameters
    │  │  └──Type Var. decl for T 
    │  │      └──type 
    │  ├──type 
    │  └──Block
    │      └──return
    │          └──Enum def.
    │              ├──Type Var. decl for Some 
    │              │  └──T 
    │              └──Type Var. decl for None 
    │                  └──void 
    └──fn params main 
        ├──Parameters
        │  └──Type Var. decl for argc 
        │      └──i32 
        ├──void 
        └──Block
            ├──Expr Var. decl for LLNode 
            │  └──Struct def.
            │      ├──Type Var. decl for val 
            │      │  └──i32 
            │      └──Type Var. decl for next 
            │          └──Fn call. 
            │              ├──Option 
            │              └──&.
            │                  ├──own 
            │                  └──LLNode 
            ├──Expr Var. decl for NextOpt 
            │  └──Fn call. 
            │      ├──Option 
            │      └──&.
            │          ├──own 
            │          └──LLNode 
            ├──Expr Var. decl for next_none 
            │  └──Enum lit. with active field None
            │      ├──NextOpt 
            │      └──null 
            ├──Expr Var. decl for first_node 
            │  └──Struct lit.
            │      ├──LLNode 
            │      ├──Assignment = 
            │      │  ├──val 
            │      │  └──1 
            │      └──Assignment = 
            │          ├──next 
            │          └──next_none 
            ├──Full mut Var. decl for hd 
            │  ├──&.
            │  │  ├──own 
            │  │  └──LLNode 
            │  └──move 
            │      └──Fn call. 
            │          ├──@alloc 
            │          └──move 
            │              └──first_node 
            ├──Full Var. decl for new_hd 
            │  ├──&.
            │  │  ├──own 
            │  │  └──LLNode 
            │  └──move 
            │      └──hd 
            ├──Full Var. decl for hd_alias 
            │  ├──&
            │  │  └──LLNode 
            │  └──new_hd 
            ├──Fn call. 
            │  ├──@free 
            │  └──move 
            │      └──new_hd 
            └──return empty

=========== GENERATED AIR ===========
%0 = block(%0, %50){
    %1 = fn Option(...)-> air.AirInst.IndexRef.type at blk %2;
    %2 = block(%2, %6){
        %3 = arg(T, air.AirInst.IndexRef.type);
        %4 = enum def (Some : %air.AirInst.IndexRef(3), None : %air.AirInst.IndexRef.void, );
        %5 = ret air.AirInst.IndexRef(4);
    };
    %6 = fn main(...)-> air.AirInst.IndexRef.void at blk %7;
    %7 = block(%7, %50){
        %8 = arg(argc, air.AirInst.IndexRef.i32);
        %9 = address of air.AirInst.IndexRef.address_of_self with cap air.AirInst.IndexRef.own;
        %10 = Fn Call Option: (%air.AirInst.IndexRef(9), );
        %11 = struct def (val : %air.AirInst.IndexRef.i32, next : %air.AirInst.IndexRef(10), );
        %12 = typeof %air.AirInst.IndexRef(11);
        %13 = type %air.AirInst.IndexRef(12) as %air.AirInst.IndexRef(11);
        %14 = address of air.AirInst.IndexRef.address_of_self with cap air.AirInst.IndexRef.own;
        %15 = Fn Call Option: (%air.AirInst.IndexRef(14), );
        %16 = typeof %air.AirInst.IndexRef(15);
        %17 = type %air.AirInst.IndexRef(16) as %air.AirInst.IndexRef(15);
        %18 = alloca air.AirInst.IndexRef(17) ;
        %19 = update_enum_ptr air.AirInst.IndexRef(18), new_tag None, new_contents air.AirInst.IndexRef.null_lit;
        %20 = typeof %air.AirInst.IndexRef(18);
        %21 = type %air.AirInst.IndexRef(20) as %air.AirInst.IndexRef(18);
        %22 = alloca air.AirInst.IndexRef(13) ;
        %23 = get_element_ptr air.AirInst.IndexRef(22), (0:val, );
        %24 = int(1);
        %25 = type_of_deref(%air.AirInst.IndexRef(23));
        %26 = type %air.AirInst.IndexRef(25) as %air.AirInst.IndexRef(24);
        %27 = store(air.AirInst.IndexRef(26), air.AirInst.IndexRef(23));
        %28 = get_element_ptr air.AirInst.IndexRef(22), (0:next, );
        %29 = type_of_deref(%air.AirInst.IndexRef(28));
        %30 = type %air.AirInst.IndexRef(29) as %air.AirInst.IndexRef(21);
        %31 = store(air.AirInst.IndexRef(30), air.AirInst.IndexRef(28));
        %32 = typeof %air.AirInst.IndexRef(22);
        %33 = type %air.AirInst.IndexRef(32) as %air.AirInst.IndexRef(22);
        %34 = move(air.AirInst.IndexRef(33));
        %35 = memalloc %air.AirInst.IndexRef(34) ;
        %36 = move(air.AirInst.IndexRef(35));
        %37 = address of air.AirInst.IndexRef.address_of_self with cap air.AirInst.IndexRef.own;
        %38 = type %air.AirInst.IndexRef(37) as %air.AirInst.IndexRef(36);
        %39 = alloca air.AirInst.IndexRef(37) ;
        %40 = store(air.AirInst.IndexRef(38), air.AirInst.IndexRef(39));
        %41 = load(%air.AirInst.IndexRef(39) with cap air.AirInst.IndexRef.own);
        %42 = move(air.AirInst.IndexRef(41));
        %43 = address of air.AirInst.IndexRef.address_of_self with cap air.AirInst.IndexRef.own;
        %44 = type %air.AirInst.IndexRef(43) as %air.AirInst.IndexRef(42);
        %45 = address of air.AirInst.IndexRef.address_of_self with cap air.AirInst.IndexRef.ref;
        %46 = type %air.AirInst.IndexRef(45) as %air.AirInst.IndexRef(44);
        %47 = move(air.AirInst.IndexRef(44));
        %48 = memfree %air.AirInst.IndexRef(47) ;
        %49 = ret_empty ;
    };
};

===========               ===========
Missing instruction mapping for air.AirInst.IndexRef(18)
Missing instruction mapping for air.AirInst.IndexRef(18)
Missing instruction mapping for air.AirInst.IndexRef(23)
Missing instruction mapping for air.AirInst.IndexRef(24)
Missing instruction mapping for air.AirInst.IndexRef(28)
Missing instruction mapping for air.AirInst.IndexRef(21)
Types are not equal: 
&.tir_stackref enum{Some : &.tir_own tir_opaque, None : tir_void, }
enum{Some : &.tir_own tir_opaque, None : tir_void, }
Types are not equal: 
&.tir_stackref enum{Some : &.tir_own tir_opaque, None : tir_void, }
enum{Some : &.tir_own tir_opaque, None : tir_void, }
Missing instruction mapping for air.AirInst.IndexRef(22)
Missing instruction mapping for air.AirInst.IndexRef(22)
Missing instruction mapping for air.AirInst.IndexRef(36)
Missing instruction mapping for air.AirInst.IndexRef(42)
Missing instruction mapping for air.AirInst.IndexRef(44)

=========== GENERATED TIR ===========
%0 = blk %1 to %36 {
    %1 = fn def Option (%3, ) -> tir_typ at blk %2;
    %2 = blk %3 to %4 {
        %3 = arg(%tir.Type.IndexRef.tir_typ, T);
        %4 = ret tir.Type.IndexRef(0) of typetir_typ;
    };
    %5 = fn def main (%7, ) -> tir_void at blk %6;
    %6 = blk %7 to %36 {
        %7 = arg(%tir.Type.IndexRef.tir_i32, argc);
        %8 = fn def Option (%10, ) -> tir_typ at blk %9;
        %9 = blk %10 to %11 {
            %10 = arg(%tir.Type.IndexRef.tir_typ, T);
            %11 = ret tir.Type.IndexRef(4) of typetir_typ;
        };
        %12 = constant_type(struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, });
        %13 = fn def Option (%15, ) -> tir_typ at blk %14;
        %14 = blk %15 to %16 {
            %15 = arg(%tir.Type.IndexRef.tir_typ, T);
            %16 = ret tir.Type.IndexRef(11) of typetir_typ;
        };
        %17 = constant_type(enum{Some : &.tir_own tir_opaque, None : tir_void, });
        %18 = alloca enum{Some : &.tir_own tir_opaque, None : tir_void, }, returns type &.tir_stackref enum{Some : &.tir_own tir_opaque, None : tir_void, };
        %19 = update_enum_ptr_with_val enum{Some : &.tir_own tir_opaque, None : tir_void, }, tir.TirInst.IndexRef(18), tagnum 1, tir.TirInst.IndexRef.tir_null_lit;
        %20 = alloca struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, }, returns type &.tir_stackref struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, };
        %21 = get_element_ptr struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, }, from tir.TirInst.IndexRef(20) by 0, ;
        %22 = constant_val(unknown_int, 1);
        %23 = constant_val(i32, 1);
        %24 = store tir_i32 from tir.TirInst.IndexRef(23), to ptr at tir.TirInst.IndexRef(21);
        %25 = get_element_ptr struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, }, from tir.TirInst.IndexRef(20) by 1, ;
        %26 = store &.tir_stackref enum{Some : &.tir_own tir_opaque, None : tir_void, } from tir.TirInst.IndexRef(18), to ptr at tir.TirInst.IndexRef(25);
        %27 = move %20;
        %28 = @memalloc %tir.TirInst.IndexRef(27) returns type &.tir_own struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, };
        %29 = move %28;
        %30 = alloca &.tir_own tir_opaque, returns type &.tir_stackref &.tir_own tir_opaque;
        %31 = store &.tir_own struct{val : tir_i32, next : enum{Some : &.tir_own tir_opaque, None : tir_void, }, } from tir.TirInst.IndexRef(29), to ptr at tir.TirInst.IndexRef(30);
        %32 = load &.tir_own tir_opaque, from tir.TirInst.IndexRef(30);
        %33 = move %32;
        %34 = move %33;
        %35 = @memfree %tir.TirInst.IndexRef(34) returns type &.tir_stackref tir_opaque;
        %36 = ret void;
    };
};

===========               ===========
LLVM Generation: 
; ModuleID = 'anvil_module'
source_filename = "anvil_module"
target triple = "x86_64-unknown-linux-gnu"

declare i32 @printf(ptr %0, ...)

define void @anvilmain(i32 %0) {
  %2 = alloca { i8, ptr }, align 8
  %3 = getelementptr { i8, ptr }, ptr %2, i32 0, i32 0
  store i32 1, ptr %3, align 4
  %4 = alloca { i32, { i8, ptr } }, align 8
  %5 = getelementptr { i32, { i8, ptr } }, ptr %4, i32 0, i32 0
  store i32 1, ptr %5, align 4
  %6 = getelementptr { i32, { i8, ptr } }, ptr %4, i32 0, i32 1
  store ptr %2, ptr %6, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr ({ i32, { i8, ptr } }, ptr null, i32 1) to i32))
  %8 = getelementptr { i32, { i8, ptr } }, ptr %4, i32 0, i32 0
  %9 = load i32, ptr %8, align 4
  %10 = getelementptr { i32, { i8, ptr } }, ptr %7, i32 0, i32 0
  store i32 %9, ptr %10, align 4
  %11 = getelementptr { i32, { i8, ptr } }, ptr %4, i32 0, i32 1, i32 0
  %12 = load i8, ptr %11, align 1
  %13 = getelementptr { i32, { i8, ptr } }, ptr %7, i32 0, i32 1, i32 0
  store i8 %12, ptr %13, align 1
  %14 = getelementptr { i32, { i8, ptr } }, ptr %4, i32 0, i32 1, i32 1
  %15 = load i64, ptr %14, align 4
  %16 = getelementptr { i32, { i8, ptr } }, ptr %7, i32 0, i32 1, i32 1
  store i64 %15, ptr %16, align 4
  %17 = alloca ptr, align 8
  store ptr %7, ptr %17, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = alloca ptr, align 8
  %20 = getelementptr ptr, ptr %18, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %19, i32 0
  store ptr %21, ptr %22, align 8
  tail call void @free(ptr %18)
  ret void
}

declare noalias ptr @malloc(i32 %0)

declare void @free(ptr %0)
