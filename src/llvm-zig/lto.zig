const LLVMtype = @import("types.zig");

pub extern fn lto_get_version() [*:0]const u8;
pub extern fn lto_get_error_message() [*:0]const u8;
pub extern fn lto_module_is_object_file(path: [*c]const u8) LLVMtype.lto_bool_t;
pub extern fn lto_module_is_object_file_for_target(path: [*c]const u8, target_triple_prefix: [*c]const u8) LLVMtype.lto_bool_t;
pub extern fn lto_module_has_objc_category(mem: ?*const anyopaque, length: usize) LLVMtype.lto_bool_t;
pub extern fn lto_module_is_object_file_in_memory(mem: ?*const anyopaque, length: usize) LLVMtype.lto_bool_t;
pub extern fn lto_module_is_object_file_in_memory_for_target(mem: ?*const anyopaque, length: usize, target_triple_prefix: [*c]const u8) LLVMtype.lto_bool_t;
pub extern fn lto_module_create(path: [*c]const u8) LLVMtype.lto_module_t;
pub extern fn lto_module_create_from_memory(mem: ?*const anyopaque, length: usize) LLVMtype.lto_module_t;
pub extern fn lto_module_create_from_memory_with_path(mem: ?*const anyopaque, length: usize, path: [*c]const u8) LLVMtype.lto_module_t;
pub extern fn lto_module_create_in_local_context(mem: ?*const anyopaque, length: usize, path: [*c]const u8) LLVMtype.lto_module_t;
pub extern fn lto_module_create_in_codegen_context(mem: ?*const anyopaque, length: usize, path: [*c]const u8, cg: LLVMtype.lto_code_gen_t) LLVMtype.lto_module_t;
pub extern fn lto_module_create_from_fd(fd: c_int, path: [*c]const u8, file_size: usize) LLVMtype.lto_module_t;
pub extern fn lto_module_create_from_fd_at_offset(fd: c_int, path: [*c]const u8, file_size: usize, map_size: usize, offset: c_long) LLVMtype.lto_module_t;
pub extern fn lto_module_dispose(mod: LLVMtype.lto_module_t) void;
pub extern fn lto_module_get_target_triple(mod: LLVMtype.lto_module_t) [*c]const u8;
pub extern fn lto_module_set_target_triple(mod: LLVMtype.lto_module_t, triple: [*c]const u8) void;
pub extern fn lto_module_get_num_symbols(mod: LLVMtype.lto_module_t) c_uint;
pub extern fn lto_module_get_symbol_name(mod: LLVMtype.lto_module_t, index: c_uint) [*c]const u8;
pub extern fn lto_module_get_symbol_attribute(mod: LLVMtype.lto_module_t, index: c_uint) LLVMtype.lto_symbol_attributes;
pub extern fn lto_module_get_linkeropts(mod: LLVMtype.lto_module_t) [*c]const u8;
pub extern fn lto_module_get_macho_cputype(mod: LLVMtype.lto_module_t, out_cputype: [*c]c_uint, out_cpusubtype: [*c]c_uint) LLVMtype.lto_bool_t;
pub extern fn lto_module_has_ctor_dtor(mod: LLVMtype.lto_module_t) LLVMtype.lto_bool_t;

pub const lto_diagnostic_handler_t = ?*const fn (LLVMtype.lto_codegen_diagnostic_severity_t, [*c]const u8, ?*anyopaque) callconv(.C) void;
pub extern fn lto_codegen_set_diagnostic_handler(LLVMtype.lto_code_gen_t, lto_diagnostic_handler_t, ?*anyopaque) void;
pub extern fn lto_codegen_create() LLVMtype.lto_code_gen_t;
pub extern fn lto_codegen_create_in_local_context() LLVMtype.lto_code_gen_t;
pub extern fn lto_codegen_dispose(LLVMtype.lto_code_gen_t) void;
pub extern fn lto_codegen_add_module(cg: LLVMtype.lto_code_gen_t, mod: LLVMtype.lto_module_t) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_set_module(cg: LLVMtype.lto_code_gen_t, mod: LLVMtype.lto_module_t) void;
pub extern fn lto_codegen_set_debug_model(cg: LLVMtype.lto_code_gen_t, LLVMtype.lto_debug_model) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_set_pic_model(cg: LLVMtype.lto_code_gen_t, LLVMtype.lto_codegen_model) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_set_cpu(cg: LLVMtype.lto_code_gen_t, cpu: [*c]const u8) void;
pub extern fn lto_codegen_set_assembler_path(cg: LLVMtype.lto_code_gen_t, path: [*c]const u8) void;
pub extern fn lto_codegen_set_assembler_args(cg: LLVMtype.lto_code_gen_t, args: [*c][*c]const u8, nargs: c_int) void;
pub extern fn lto_codegen_add_must_preserve_symbol(cg: LLVMtype.lto_code_gen_t, symbol: [*c]const u8) void;
pub extern fn lto_codegen_write_merged_modules(cg: LLVMtype.lto_code_gen_t, path: [*c]const u8) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_compile(cg: LLVMtype.lto_code_gen_t, length: [*c]usize) ?*const anyopaque;
pub extern fn lto_codegen_compile_to_file(cg: LLVMtype.lto_code_gen_t, name: [*c][*c]const u8) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_optimize(cg: LLVMtype.lto_code_gen_t) LLVMtype.lto_bool_t;
pub extern fn lto_codegen_compile_optimized(cg: LLVMtype.lto_code_gen_t, length: [*c]usize) ?*const anyopaque;
pub extern fn lto_api_version() c_uint;
pub extern fn lto_set_debug_options(options: [*c]const [*c]const u8, number: c_int) void;
pub extern fn lto_codegen_debug_options(cg: LLVMtype.lto_code_gen_t, [*c]const u8) void;
pub extern fn lto_codegen_debug_options_array(cg: LLVMtype.lto_code_gen_t, [*c]const [*c]const u8, number: c_int) void;
pub extern fn lto_initialize_disassembler() void;
pub extern fn lto_codegen_set_should_internalize(cg: LLVMtype.lto_code_gen_t, ShouldInternalize: LLVMtype.lto_bool_t) void;
pub extern fn lto_codegen_set_should_embed_uselists(cg: LLVMtype.lto_code_gen_t, ShouldEmbedUselists: LLVMtype.lto_bool_t) void;
pub extern fn lto_input_create(buffer: ?*const anyopaque, buffer_size: usize, path: [*c]const u8) LLVMtype.lto_input_t;
pub extern fn lto_input_dispose(input: LLVMtype.lto_input_t) void;
pub extern fn lto_input_get_num_dependent_libraries(input: LLVMtype.lto_input_t) c_uint;
pub extern fn lto_input_get_dependent_library(input: LLVMtype.lto_input_t, index: usize, size: [*c]usize) [*c]const u8;
pub extern fn lto_runtime_lib_symbols_list(size: [*c]usize) [*c]const [*c]const u8;
pub const LTOObjectBuffer = extern struct {
    Buffer: [*c]const u8,
    Size: usize,
};
pub extern fn thinlto_create_codegen() LLVMtype.lto_code_gen_t;
pub extern fn thinlto_codegen_dispose(cg: LLVMtype.lto_code_gen_t) void;
pub extern fn thinlto_codegen_add_module(cg: LLVMtype.lto_code_gen_t, identifier: [*c]const u8, data: [*c]const u8, length: c_int) void;
pub extern fn thinlto_codegen_process(cg: LLVMtype.lto_code_gen_t) void;
pub extern fn thinlto_module_get_num_objects(cg: LLVMtype.lto_code_gen_t) c_uint;
pub extern fn thinlto_module_get_object(cg: LLVMtype.lto_code_gen_t, index: c_uint) LTOObjectBuffer;
pub extern fn thinlto_module_get_num_object_files(cg: LLVMtype.lto_code_gen_t) c_uint;
pub extern fn thinlto_module_get_object_file(cg: LLVMtype.lto_code_gen_t, index: c_uint) [*c]const u8;
pub extern fn thinlto_codegen_set_pic_model(cg: LLVMtype.lto_code_gen_t, LLVMtype.lto_codegen_model) LLVMtype.lto_bool_t;
pub extern fn thinlto_codegen_set_savetemps_dir(cg: LLVMtype.lto_code_gen_t, save_temps_dir: [*c]const u8) void;
pub extern fn thinlto_set_generated_objects_dir(cg: LLVMtype.lto_code_gen_t, save_temps_dir: [*c]const u8) void;
pub extern fn thinlto_codegen_set_cpu(cg: LLVMtype.lto_code_gen_t, cpu: [*c]const u8) void;
pub extern fn thinlto_codegen_disable_codegen(cg: LLVMtype.lto_code_gen_t, disable: LLVMtype.lto_bool_t) void;
pub extern fn thinlto_codegen_set_codegen_only(cg: LLVMtype.lto_code_gen_t, codegen_only: LLVMtype.lto_bool_t) void;
pub extern fn thinlto_debug_options(options: [*c]const [*c]const u8, number: c_int) void;
pub extern fn lto_module_is_thinlto(mod: LLVMtype.lto_module_t) LLVMtype.lto_bool_t;
pub extern fn thinlto_codegen_add_must_preserve_symbol(cg: LLVMtype.lto_code_gen_t, name: [*c]const u8, length: c_int) void;
pub extern fn thinlto_codegen_add_cross_referenced_symbol(cg: LLVMtype.lto_code_gen_t, name: [*c]const u8, length: c_int) void;
pub extern fn thinlto_codegen_set_cache_dir(cg: LLVMtype.lto_code_gen_t, cache_dir: [*c]const u8) void;
pub extern fn thinlto_codegen_set_cache_pruning_interval(cg: LLVMtype.lto_code_gen_t, interval: c_int) void;
pub extern fn thinlto_codegen_set_final_cache_size_relative_to_available_space(cg: LLVMtype.lto_code_gen_t, percentage: c_uint) void;
pub extern fn thinlto_codegen_set_cache_entry_expiration(cg: LLVMtype.lto_code_gen_t, expiration: c_uint) void;
pub extern fn thinlto_codegen_set_cache_size_bytes(cg: LLVMtype.lto_code_gen_t, max_size_bytes: c_uint) void;
pub extern fn thinlto_codegen_set_cache_size_megabytes(cg: LLVMtype.lto_code_gen_t, max_size_megabytes: c_uint) void;
pub extern fn thinlto_codegen_set_cache_size_files(cg: LLVMtype.lto_code_gen_t, max_size_files: c_uint) void;
