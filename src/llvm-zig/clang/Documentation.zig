const CXString = @import("CXString.zig");
const CXErrorCode = @import("CXErrorCode.zig");
const CXSourceLocation = @import("CXSourceLocation.zig");
const CXFile = @import("CXFile.zig");
const CXDiagnostic = @import("CXDiagnostic.zig");
const Index = @import("Index.zig");
const std = @import("std");

pub const CXComment = extern struct {
    ASTNode: ?*const anyopaque = std.mem.zeroes(?*const anyopaque),
    TranslationUnit: Index.CXTranslationUnit = std.mem.zeroes(Index.CXTranslationUnit),
};
pub extern fn clang_Cursor_getParsedComment(C: Index.CXCursor) CXComment;
pub const CXComment_Null: c_int = 0;
pub const CXComment_Text: c_int = 1;
pub const CXComment_InlineCommand: c_int = 2;
pub const CXComment_HTMLStartTag: c_int = 3;
pub const CXComment_HTMLEndTag: c_int = 4;
pub const CXComment_Paragraph: c_int = 5;
pub const CXComment_BlockCommand: c_int = 6;
pub const CXComment_ParamCommand: c_int = 7;
pub const CXComment_TParamCommand: c_int = 8;
pub const CXComment_VerbatimBlockCommand: c_int = 9;
pub const CXComment_VerbatimBlockLine: c_int = 10;
pub const CXComment_VerbatimLine: c_int = 11;
pub const CXComment_FullComment: c_int = 12;
pub const CXCommentKind = c_uint;
pub const CXCommentInlineCommandRenderKind_Normal: c_int = 0;
pub const CXCommentInlineCommandRenderKind_Bold: c_int = 1;
pub const CXCommentInlineCommandRenderKind_Monospaced: c_int = 2;
pub const CXCommentInlineCommandRenderKind_Emphasized: c_int = 3;
pub const CXCommentInlineCommandRenderKind_Anchor: c_int = 4;
pub const CXCommentInlineCommandRenderKind = c_uint;
pub const CXCommentParamPassDirection_In: c_int = 0;
pub const CXCommentParamPassDirection_Out: c_int = 1;
pub const CXCommentParamPassDirection_InOut: c_int = 2;
pub const CXCommentParamPassDirection = c_uint;
pub extern fn clang_Comment_getKind(Comment: CXComment) CXCommentKind;
pub extern fn clang_Comment_getNumChildren(Comment: CXComment) c_uint;
pub extern fn clang_Comment_getChild(Comment: CXComment, ChildIdx: c_uint) CXComment;
pub extern fn clang_Comment_isWhitespace(Comment: CXComment) c_uint;
pub extern fn clang_InlineContentComment_hasTrailingNewline(Comment: CXComment) c_uint;
pub extern fn clang_TextComment_getText(Comment: CXComment) CXString.CXString;
pub extern fn clang_InlineCommandComment_getCommandName(Comment: CXComment) CXString.CXString;
pub extern fn clang_InlineCommandComment_getRenderKind(Comment: CXComment) CXCommentInlineCommandRenderKind;
pub extern fn clang_InlineCommandComment_getNumArgs(Comment: CXComment) c_uint;
pub extern fn clang_InlineCommandComment_getArgText(Comment: CXComment, ArgIdx: c_uint) CXString.CXString;
pub extern fn clang_HTMLTagComment_getTagName(Comment: CXComment) CXString.CXString;
pub extern fn clang_HTMLStartTagComment_isSelfClosing(Comment: CXComment) c_uint;
pub extern fn clang_HTMLStartTag_getNumAttrs(Comment: CXComment) c_uint;
pub extern fn clang_HTMLStartTag_getAttrName(Comment: CXComment, AttrIdx: c_uint) CXString.CXString;
pub extern fn clang_HTMLStartTag_getAttrValue(Comment: CXComment, AttrIdx: c_uint) CXString.CXString;
pub extern fn clang_BlockCommandComment_getCommandName(Comment: CXComment) CXString.CXString;
pub extern fn clang_BlockCommandComment_getNumArgs(Comment: CXComment) c_uint;
pub extern fn clang_BlockCommandComment_getArgText(Comment: CXComment, ArgIdx: c_uint) CXString.CXString;
pub extern fn clang_BlockCommandComment_getParagraph(Comment: CXComment) CXComment;
pub extern fn clang_ParamCommandComment_getParamName(Comment: CXComment) CXString.CXString;
pub extern fn clang_ParamCommandComment_isParamIndexValid(Comment: CXComment) c_uint;
pub extern fn clang_ParamCommandComment_getParamIndex(Comment: CXComment) c_uint;
pub extern fn clang_ParamCommandComment_isDirectionExplicit(Comment: CXComment) c_uint;
pub extern fn clang_ParamCommandComment_getDirection(Comment: CXComment) CXCommentParamPassDirection;
pub extern fn clang_TParamCommandComment_getParamName(Comment: CXComment) CXString.CXString;
pub extern fn clang_TParamCommandComment_isParamPositionValid(Comment: CXComment) c_uint;
pub extern fn clang_TParamCommandComment_getDepth(Comment: CXComment) c_uint;
pub extern fn clang_TParamCommandComment_getIndex(Comment: CXComment, Depth: c_uint) c_uint;
pub extern fn clang_VerbatimBlockLineComment_getText(Comment: CXComment) CXString.CXString;
pub extern fn clang_VerbatimLineComment_getText(Comment: CXComment) CXString.CXString;
pub extern fn clang_HTMLTagComment_getAsString(Comment: CXComment) CXString.CXString;
pub extern fn clang_FullComment_getAsHTML(Comment: CXComment) CXString.CXString;
pub extern fn clang_FullComment_getAsXML(Comment: CXComment) CXString.CXString;
pub const CXAPISetImpl = opaque {};
pub const CXAPISet = ?*CXAPISetImpl;
pub extern fn clang_createAPISet(tu: Index.CXTranslationUnit, out_api: [*c]CXAPISet) CXErrorCode;
pub extern fn clang_disposeAPISet(api: CXAPISet) void;
pub extern fn clang_getSymbolGraphForUSR(usr: [*:0]const u8, api: CXAPISet) CXString.CXString;
pub extern fn clang_getSymbolGraphForCursor(cursor: Index.CXCursor) CXString.CXString;
