const std = @import("std");
const CXString = @import("CXString.zig");
const CXSourceLocation = @import("CXSourceLocation.zig");

pub const CXDiagnostic_Ignored: c_int = 0;
pub const CXDiagnostic_Note: c_int = 1;
pub const CXDiagnostic_Warning: c_int = 2;
pub const CXDiagnostic_Error: c_int = 3;
pub const CXDiagnostic_Fatal: c_int = 4;
pub const CXDiagnosticSeverity = c_uint;
pub const CXDiagnostic = ?*anyopaque;
pub const CXDiagnosticSet = ?*anyopaque;
pub extern fn clang_getNumDiagnosticsInSet(Diags: CXDiagnosticSet) c_uint;
pub extern fn clang_getDiagnosticInSet(Diags: CXDiagnosticSet, Index: c_uint) CXDiagnostic;
pub const CXLoadDiag_None: c_int = 0;
pub const CXLoadDiag_Unknown: c_int = 1;
pub const CXLoadDiag_CannotLoad: c_int = 2;
pub const CXLoadDiag_InvalidFile: c_int = 3;
pub const CXLoadDiag_Error = c_uint;
pub extern fn clang_loadDiagnostics(file: [*:0]const u8, @"error": [*c]CXLoadDiag_Error, errorString: [*c]CXString.CXString) CXDiagnosticSet;
pub extern fn clang_disposeDiagnosticSet(Diags: CXDiagnosticSet) void;
pub extern fn clang_getChildDiagnostics(D: CXDiagnostic) CXDiagnosticSet;
pub extern fn clang_disposeDiagnostic(Diagnostic: CXDiagnostic) void;
pub const CXDiagnostic_DisplaySourceLocation: c_int = 1;
pub const CXDiagnostic_DisplayColumn: c_int = 2;
pub const CXDiagnostic_DisplaySourceRanges: c_int = 4;
pub const CXDiagnostic_DisplayOption: c_int = 8;
pub const CXDiagnostic_DisplayCategoryId: c_int = 16;
pub const CXDiagnostic_DisplayCategoryName: c_int = 32;
pub const CXDiagnosticDisplayOptions = c_uint;
pub extern fn clang_formatDiagnostic(Diagnostic: CXDiagnostic, Options: c_uint) CXString.CXString;
pub extern fn clang_defaultDiagnosticDisplayOptions() c_uint;
pub extern fn clang_getDiagnosticSeverity(CXDiagnostic) CXDiagnosticSeverity;
pub extern fn clang_getDiagnosticLocation(CXDiagnostic) CXSourceLocation.CXSourceLocation;
pub extern fn clang_getDiagnosticSpelling(CXDiagnostic) CXString.CXString;
pub extern fn clang_getDiagnosticOption(Diag: CXDiagnostic, Disable: [*c]CXString.CXString) CXString.CXString;
pub extern fn clang_getDiagnosticCategory(CXDiagnostic) c_uint;
pub extern fn clang_getDiagnosticCategoryName(Category: c_uint) CXString.CXString;
pub extern fn clang_getDiagnosticCategoryText(CXDiagnostic) CXString.CXString;
pub extern fn clang_getDiagnosticNumRanges(CXDiagnostic) c_uint;
pub extern fn clang_getDiagnosticRange(Diagnostic: CXDiagnostic, Range: c_uint) CXSourceLocation.CXSourceRange;
pub extern fn clang_getDiagnosticNumFixIts(Diagnostic: CXDiagnostic) c_uint;
pub extern fn clang_getDiagnosticFixIt(Diagnostic: CXDiagnostic, FixIt: c_uint, ReplacementRange: [*c]CXSourceLocation.CXSourceRange) CXString.CXString;
